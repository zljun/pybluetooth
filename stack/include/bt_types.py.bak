from dataclasses import dataclass
import dataclasses
from enum import IntEnum, IntFlag
from bitstring import BitArray
from co_types import *

class bdaddr_t(bytearray):
    def __repr__(self):
        self.repr = '{:02X}:{:02X}:{:02X}:{:02X}:{:02X}:{:02X}'.format(self[5],self[4],self[3],self[2],self[1],self[0])
        return self.repr

    def __str__(self):
        return self.__repr__()

    def __len__(self):
        return 6  

class lmp_version(IntEnum16):
   V1_0b = 0
   V1_1 = 1
   V2_0b = 2
   V2_0_EDR = 3
   V2_1_EDR = 4
   V3_0_HS = 5
   V4_0 = 6
   V4_1 = 7
   V4_2 = 8
   V5_0 = 9

   def __str__(self):
        for x in lmp_version.__members__:
            if lmp_version.__members__[x] == self:
                return x
        return 'unknown'

class lmp_manufacture(IntEnum16):
    Ericsson = 0
    Nokia = 1
    Intel_Corp = 2
    IBM = 3
    Toshiba_Corp = 4
    _3COM = 5
    Microsoft = 6
    Lucent = 7
    Motorola = 8
    Infineon = 9
    Qualcomm_CSR = 10
    Silicon_Wave = 11
    Digianswer = 12
    Texas_Instruments = 13
    Parthus = 14
    Broadcom_Corporation = 15
    Qualcomm = 29 
    Renesas = 54
    MediaTek = 70
    Marvell = 72
    Apple = 76
    Harman = 87
    Nordic = 89
    Realtek = 93
    RDA = 97
    MindTree = 106
    ShangHai_Super_Smart = 114
    Vimicro = 129
    Quintic = 142
    Airoha = 148
    Bestechnic = 688

    def __str__(self):
        for x in lmp_manufacture.__members__:
            if lmp_manufacture.__members__[x] == self:
                return x
        return 'unknown'       
               
class power_mode_t(IntEnum8):
    ACTIVE = 0
    HOLD = 1
    SNIFF = 2

# both ACL in and out use 2 in btsnoop file, so use btsnp_packet_t to determine
class hci_flag_t(IntEnum8):
    HCI_CMD = 1
    ACL_OUT = 2
    ACL_IN = 3
    HCI_EVT = 4

class tBT_TRANSPORT(IntEnum8):
    INVALID = 0
    BR_EDR = 1
    LE = 2

# Definitions for packet type masks (BT1.2 and BT2.0 definitions)
class acl_packet_t(IntFlag16):    
    NO_2_DH1 0x0002
    #define HCI_PKT_TYPES_MASK_NO_3_DH1 0x0004
    #define HCI_PKT_TYPES_MASK_DM1 0x0008
    #define HCI_PKT_TYPES_MASK_DH1 0x0010
    #define HCI_PKT_TYPES_MASK_HV1 0x0020
    #define HCI_PKT_TYPES_MASK_HV2 0x0040
    #define HCI_PKT_TYPES_MASK_HV3 0x0080
    #define HCI_PKT_TYPES_MASK_NO_2_DH3 0x0100
    #define HCI_PKT_TYPES_MASK_NO_3_DH3 0x0200
    #define HCI_PKT_TYPES_MASK_DM3 0x0400
    #define HCI_PKT_TYPES_MASK_DH3 0x0800
    #define HCI_PKT_TYPES_MASK_NO_2_DH5 0x1000
    #define HCI_PKT_TYPES_MASK_NO_3_DH5 0x2000
    #define HCI_PKT_TYPES_MASK_DM5 0x4000
    #define HCI_PKT_TYPES_MASK_DH5 0x8000

